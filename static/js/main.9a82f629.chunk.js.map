{"version":3,"sources":["components/TableRow.module.css","components/tableData.module.css","components/Table.module.css","logic/operate.js","components/TableData.js","components/TableRow.js","components/Table.js","components/Calculator.js","logic/calculator.js","index.js"],"names":["module","exports","operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","mod","e","Error","TableData","props","state","td","styles","this","data","handleClick","otherProps","next","total","className","onClick","Component","defaultProps","TableRow","tr","rowData","map","stateObj","Math","random","Table","table","tableData","ind","isFirst","Calculator","setState","obj","buttonName","Number","isNaN","match","includes","parseFloat","calculate","bind","String","fromCharCode","prototypes","propTypes","instanceOf","Object","isRequired","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a82f629.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tr\":\"TableRow_tr__3top_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"td\":\"tableData_td__6_i1P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__3M_gK\"};","import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  try {\n    if (operation === 'รท') {\n      return one.div(two).toString();\n    }\n    if (operation === '%') {\n      return one.mod(two).toString();\n    }\n  } catch (e) {\n    return 'error: can not divide by zero';\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport styles from './tableData.module.css';\n\nclass TableData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { td } = styles;\n    const {\n      data,\n      handleClick,\n      otherProps,\n    } = this.props;\n    const { next, operation, total } = otherProps;\n    return data === 0 ? (\n      <td className={td}>\n        <div>\n          <span>{total}</span>\n          <span>{operation}</span>\n          <span>{next}</span>\n        </div>\n      </td>\n    ) : (\n      <td className={td}>\n        <div\n          aria-hidden\n          onClick={() => handleClick(data)}\n        >\n          {data}\n        </div>\n      </td>\n    );\n  }\n}\n\nTableData.propTypes = {\n  data: propTypes.oneOfType([propTypes.string, propTypes.number]),\n  handleClick: propTypes.func.isRequired,\n  otherProps: propTypes.instanceOf(Object).isRequired,\n};\n\nTableData.defaultProps = {\n  data: '0',\n};\n\nexport default TableData;\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport styles from './TableRow.module.css';\nimport TableData from './TableData';\n\nclass TableRow extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { tr } = styles;\n    const {\n      rowData,\n      handleClick,\n      otherProps,\n    } = this.props;\n\n    return (\n      <tr className={tr}>\n        {rowData.map((data) => (\n          <TableData\n            key={Math.random()}\n            stateObj={this.state}\n            data={data}\n            handleClick={handleClick}\n            otherProps={otherProps}\n          />\n        ))}\n      </tr>\n    );\n  }\n}\n\nTableRow.propTypes = {\n  rowData: propTypes.instanceOf(Array).isRequired,\n  handleClick: propTypes.func.isRequired,\n  otherProps: propTypes.instanceOf(Object).isRequired,\n};\n\nexport default TableRow;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TableRow from './TableRow';\nimport styles from './Table.module.css';\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { table } = styles;\n    const { tableData, handleClick, otherProps } = this.props;\n    return (\n      <table className={table}>\n        <tbody>\n          {tableData.map((rowData, ind) => {\n            if (ind === 0) {\n              return (\n                <TableRow\n                  key={Math.random()}\n                  handleClick={handleClick}\n                  isFirst\n                  rowData={rowData}\n                  otherProps={otherProps}\n                />\n              );\n            }\n            return (\n              <TableRow\n                key={Math.random()}\n                handleClick={handleClick}\n                isFirst={false}\n                rowData={rowData}\n                otherProps={otherProps}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nTable.propTypes = {\n  tableData: PropTypes.instanceOf(Array).isRequired,\n  handleClick: PropTypes.func.isRequired,\n  otherProps: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport default Table;\n","import propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport calculate from '../logic/calculator';\nimport Table from './Table';\n\nexport default class Calculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      total: 0,\n      next: null,\n      operation: null,\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick = (data) => {\n    this.setState((obj) => calculate(obj, data));\n  };\n\n  render() {\n    const tableData = [\n      [0],\n      ['AC', '+/-', '%', `${String.fromCharCode(247)}`],\n      ['7', '8', '9', 'x'],\n      ['4', '5', '6', '-'],\n      ['1', '2', '3', '+'],\n      ['0', '.', '='],\n    ];\n\n    const { next, operation, total } = this.state;\n    const otherProps = {\n      next,\n      operation,\n      total,\n    };\n\n    return <Table otherProps={otherProps} handleClick={this.handleClick} tableData={tableData} />;\n  }\n}\n\nCalculator.prototypes = {\n  otherProps: propTypes.instanceOf(Object).isRequired,\n};\n","import operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: 0,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (Number.isNaN(Number(obj.total))) {\n    return {\n      total: 0,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return {};\n      }\n      return { next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: '0.' };\n    }\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n      return { total: `${obj.total} .` };\n    }\n    return { total: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    if ((obj.total || obj.total === '0') && !obj.next) {\n      return { ...obj, operation: buttonName };\n    }\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Calculator from './components/Calculator';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}