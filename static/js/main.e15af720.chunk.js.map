{"version":3,"sources":["logic/operate.js","components/TableScreen.js","components/TableData.js","components/TableRow.js","components/Table.js","components/Calculator.js","logic/calculator.js","index.js","components/TableRow.module.css","components/tableData.module.css","components/Table.module.css"],"names":["operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","mod","e","Error","TableScreen","props","data","TableData","td","styles","handleClick","otherProps","next","mapArray","total","className","map","Math","random","onClick","defaultProps","TableRow","tr","rowData","Table","table","tableData","Calculator","useState","state","setState","String","fromCharCode","obj","newObject","buttonName","Number","isNaN","match","includes","parseFloat","calculate","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.e15af720.chunk.js","sourcesContent":["import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  try {\n    if (operation === 'รท') {\n      return one.div(two).toString();\n    }\n    if (operation === '%') {\n      return one.mod(two).toString();\n    }\n  } catch (e) {\n    return 'error: can not divide by zero';\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import propTypes from 'prop-types';\nimport React from 'react';\n\nconst TableScreen = (props) => {\n  const { data } = props;\n  return <span>{data}</span>;\n};\n\nTableScreen.propTypes = {\n  data: propTypes.string.isRequired,\n};\n\nexport default TableScreen;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport styles from './tableData.module.css';\nimport TableScreen from './TableScreen';\n\nconst TableData = (props) => {\n  const { td } = styles;\n  const { data, handleClick, otherProps } = props;\n  const { next, operation, total } = otherProps;\n  const mapArray = [total, operation, next];\n  return data === 0 ? (\n    <td className={td}>\n      <div>\n        {mapArray.map((data) => <TableScreen key={Math.random()} data={data} />)}\n      </div>\n    </td>\n  ) : (\n    <td className={td}>\n      <div aria-hidden onClick={() => handleClick(data)}>\n        {data}\n      </div>\n    </td>\n  );\n};\n\nTableData.propTypes = {\n  data: propTypes.oneOfType([propTypes.string, propTypes.number]),\n  handleClick: propTypes.func.isRequired,\n  otherProps: propTypes.instanceOf(Object).isRequired,\n};\n\nTableData.defaultProps = {\n  data: '0',\n};\n\nexport default TableData;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport styles from './TableRow.module.css';\nimport TableData from './TableData';\n\nconst TableRow = (props) => {\n  const { tr } = styles;\n  const { rowData, handleClick, otherProps } = props;\n\n  return (\n    <tr className={tr}>\n      {rowData.map((data) => (\n        <TableData\n          key={Math.random()}\n          data={data}\n          handleClick={handleClick}\n          otherProps={otherProps}\n        />\n      ))}\n    </tr>\n  );\n};\n\nTableRow.propTypes = {\n  rowData: propTypes.instanceOf(Array).isRequired,\n  handleClick: propTypes.func.isRequired,\n  otherProps: propTypes.instanceOf(Object).isRequired,\n};\n\nexport default TableRow;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TableRow from './TableRow';\nimport styles from './Table.module.css';\n\nconst Table = (props) => {\n  const { table } = styles;\n  const { tableData, handleClick, otherProps } = props;\n\n  return (\n    <table className={table}>\n      <tbody>\n        {tableData.map((rowData) => (\n          <TableRow\n            key={Math.random()}\n            handleClick={handleClick}\n            rowData={rowData}\n            otherProps={otherProps}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nTable.propTypes = {\n  tableData: PropTypes.instanceOf(Array).isRequired,\n  handleClick: PropTypes.func.isRequired,\n  otherProps: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport default Table;\n","import React, { useState } from 'react';\nimport calculate from '../logic/calculator';\nimport Table from './Table';\n\nconst Calculator = () => {\n  const [state, setState] = useState({\n    total: 0,\n    next: null,\n    operation: null,\n  });\n\n  const handleClick = (data) => {\n    setState((obj) => {\n      const newObject = calculate(state, data);\n      return {\n        ...obj,\n        ...newObject,\n      };\n    });\n  };\n\n  const tableData = [\n    [0],\n    ['AC', '+/-', '%', `${String.fromCharCode(247)}`],\n    ['7', '8', '9', 'x'],\n    ['4', '5', '6', '-'],\n    ['1', '2', '3', '+'],\n    ['0', '.', '='],\n  ];\n\n  return (\n    <Table otherProps={state} handleClick={handleClick} tableData={tableData} />\n  );\n};\n\nexport default Calculator;\n","import operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: 0,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (Number.isNaN(Number(obj.total))) {\n    return {\n      total: 0,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return {};\n      }\n      return { next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: '0.' };\n    }\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n      return { total: `${obj.total} .` };\n    }\n    return { total: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    if ((obj.total || obj.total === '0') && !obj.next) {\n      return { ...obj, operation: buttonName };\n    }\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Calculator from './components/Calculator';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tr\":\"TableRow_tr__3top_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"td\":\"tableData_td__6_i1P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__3M_gK\"};"],"sourceRoot":""}