{"version":3,"sources":["logic/operate.js","components/TableData.js","components/TableRow.js","components/Table.js","components/Calculator.js","logic/calculator.js","index.js","components/TableRow.module.css","components/tableData.module.css","components/Table.module.css"],"names":["operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","mod","e","Error","TableData","props","td","styles","data","handleClick","otherProps","next","total","className","onClick","defaultProps","TableRow","tr","rowData","map","Math","random","Table","table","tableData","ind","Calculator","useState","state","setState","String","fromCharCode","obj","newObject","buttonName","Number","isNaN","match","includes","parseFloat","calculate","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.b02e63ed.chunk.js","sourcesContent":["import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  try {\n    if (operation === 'รท') {\n      return one.div(two).toString();\n    }\n    if (operation === '%') {\n      return one.mod(two).toString();\n    }\n  } catch (e) {\n    return 'error: can not divide by zero';\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport styles from './tableData.module.css';\n\nconst TableData = (props) => {\n  const { td } = styles;\n  const { data, handleClick, otherProps } = props;\n  const { next, operation, total } = otherProps;\n  return data === 0 ? (\n    <td className={td}>\n      <div>\n        <span>{total}</span>\n        <span>{operation}</span>\n        <span>{next}</span>\n      </div>\n    </td>\n  ) : (\n    <td className={td}>\n      <div aria-hidden onClick={() => handleClick(data)}>\n        {data}\n      </div>\n    </td>\n  );\n};\n\nTableData.propTypes = {\n  data: propTypes.oneOfType([propTypes.string, propTypes.number]),\n  handleClick: propTypes.func.isRequired,\n  otherProps: propTypes.instanceOf(Object).isRequired,\n};\n\nTableData.defaultProps = {\n  data: '0',\n};\n\nexport default TableData;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport styles from './TableRow.module.css';\nimport TableData from './TableData';\n\nconst TableRow = (props) => {\n  const { tr } = styles;\n  const { rowData, handleClick, otherProps } = props;\n\n  return (\n    <tr className={tr}>\n      {rowData.map((data) => (\n        <TableData\n          key={Math.random()}\n          data={data}\n          handleClick={handleClick}\n          otherProps={otherProps}\n        />\n      ))}\n    </tr>\n  );\n};\n\nTableRow.propTypes = {\n  rowData: propTypes.instanceOf(Array).isRequired,\n  handleClick: propTypes.func.isRequired,\n  otherProps: propTypes.instanceOf(Object).isRequired,\n};\n\nexport default TableRow;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TableRow from './TableRow';\nimport styles from './Table.module.css';\n\nconst Table = (props) => {\n  const { table } = styles;\n  const { tableData, handleClick, otherProps } = props;\n\n  return (\n    <table className={table}>\n      <tbody>\n        {tableData.map((rowData, ind) => {\n          if (ind === 0) {\n            return (\n              <TableRow\n                key={Math.random()}\n                handleClick={handleClick}\n                rowData={rowData}\n                otherProps={otherProps}\n              />\n            );\n          }\n          return (\n            <TableRow\n              key={Math.random()}\n              handleClick={handleClick}\n              rowData={rowData}\n              otherProps={otherProps}\n            />\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nTable.propTypes = {\n  tableData: PropTypes.instanceOf(Array).isRequired,\n  handleClick: PropTypes.func.isRequired,\n  otherProps: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport default Table;\n","import React, { useState } from 'react';\nimport calculate from '../logic/calculator';\nimport Table from './Table';\n\nconst Calculator = () => {\n  const [state, setState] = useState({\n    total: 0,\n    next: null,\n    operation: null,\n  });\n\n  const handleClick = (data) => {\n    setState((obj) => {\n      const newObject = calculate(state, data);\n      return {\n        ...obj,\n        ...newObject,\n      };\n    });\n  };\n\n  const tableData = [\n    [0],\n    ['AC', '+/-', '%', `${String.fromCharCode(247)}`],\n    ['7', '8', '9', 'x'],\n    ['4', '5', '6', '-'],\n    ['1', '2', '3', '+'],\n    ['0', '.', '='],\n  ];\n\n  return (\n    <Table otherProps={state} handleClick={handleClick} tableData={tableData} />\n  );\n};\n\nexport default Calculator;\n","import operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: 0,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (Number.isNaN(Number(obj.total))) {\n    return {\n      total: 0,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return {};\n      }\n      return { next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: '0.' };\n    }\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n      return { total: `${obj.total} .` };\n    }\n    return { total: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    if ((obj.total || obj.total === '0') && !obj.next) {\n      return { ...obj, operation: buttonName };\n    }\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Calculator from './components/Calculator';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tr\":\"TableRow_tr__3top_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"td\":\"tableData_td__6_i1P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__3M_gK\"};"],"sourceRoot":""}