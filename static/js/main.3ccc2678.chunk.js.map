{"version":3,"sources":["logic/operate.js","components/TableScreen.js","components/TableData.js","components/TableRow.js","components/Table.js","components/Calculator.js","logic/calculator.js","index.js","components/TableData.module.css","components/TableRow.module.css","components/Table.module.css"],"names":["operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","mod","e","Error","TableScreen","data","defaultProps","TableData","handleClick","otherProps","next","mapArray","total","className","td","map","Math","random","onClick","TableRow","rowData","tr","Table","tableData","table","Calculator","useState","state","setState","String","fromCharCode","obj","newObject","buttonName","Number","isNaN","match","includes","parseFloat","calculate","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.3ccc2678.chunk.js","sourcesContent":["import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  try {\n    if (operation === 'รท') {\n      return one.div(two).toString();\n    }\n    if (operation === '%') {\n      return one.mod(two).toString();\n    }\n  } catch (e) {\n    return 'error: can not divide by zero';\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import propTypes from 'prop-types';\nimport React from 'react';\n\nconst TableScreen = ({ data }) => <span>{data}</span>;\n\nTableScreen.propTypes = {\n  data: propTypes.oneOfType([propTypes.string, propTypes.any]),\n};\n\nTableScreen.defaultProps = {\n  data: '',\n};\n\nexport default TableScreen;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { td } from './TableData.module.css';\nimport TableScreen from './TableScreen';\n\nconst TableData = ({ data, handleClick, otherProps }) => {\n  const { next, operation, total } = otherProps;\n  const mapArray = [total, operation, next];\n  return data === 0 ? (\n    <td className={td}>\n      <div>\n        {mapArray.map((data) => <TableScreen key={Math.random()} data={data} />)}\n      </div>\n    </td>\n  ) : (\n    <td className={td}>\n      <div aria-hidden onClick={() => handleClick(data)}>\n        {data}\n      </div>\n    </td>\n  );\n};\n\nTableData.propTypes = {\n  data: propTypes.oneOfType([propTypes.string, propTypes.number]),\n  handleClick: propTypes.func.isRequired,\n  otherProps: propTypes.instanceOf(Object).isRequired,\n};\n\nTableData.defaultProps = {\n  data: '0',\n};\n\nexport default TableData;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { tr } from './TableRow.module.css';\nimport TableData from './TableData';\n\nconst TableRow = ({ rowData, handleClick, otherProps }) => (\n  <tr className={tr}>\n    {rowData.map((data) => (\n      <TableData\n        key={Math.random()}\n        data={data}\n        handleClick={handleClick}\n        otherProps={otherProps}\n      />\n    ))}\n  </tr>\n);\n\nTableRow.propTypes = {\n  rowData: propTypes.instanceOf(Array).isRequired,\n  handleClick: propTypes.func.isRequired,\n  otherProps: propTypes.instanceOf(Object).isRequired,\n};\n\nexport default TableRow;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TableRow from './TableRow';\nimport { table } from './Table.module.css';\n\nconst Table = ({ tableData, handleClick, otherProps }) => (\n  <table className={table}>\n    <tbody>\n      {tableData.map((rowData) => (\n        <TableRow\n          key={Math.random()}\n          handleClick={handleClick}\n          rowData={rowData}\n          otherProps={otherProps}\n        />\n      ))}\n    </tbody>\n  </table>\n);\n\nTable.propTypes = {\n  tableData: PropTypes.instanceOf(Array).isRequired,\n  handleClick: PropTypes.func.isRequired,\n  otherProps: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport default Table;\n","import React, { useState } from 'react';\nimport calculate from '../logic/calculator';\nimport Table from './Table';\n\nconst Calculator = () => {\n  const [state, setState] = useState({\n    total: 0,\n    next: null,\n    operation: null,\n  });\n\n  const handleClick = (data) => {\n    setState((obj) => {\n      const newObject = calculate(state, data);\n      return {\n        ...obj,\n        ...newObject,\n      };\n    });\n  };\n\n  const tableData = [\n    [0],\n    ['AC', '+/-', '%', `${String.fromCharCode(247)}`],\n    ['7', '8', '9', 'x'],\n    ['4', '5', '6', '-'],\n    ['1', '2', '3', '+'],\n    ['0', '.', '='],\n  ];\n\n  return (\n    <Table otherProps={state} handleClick={handleClick} tableData={tableData} />\n  );\n};\n\nexport default Calculator;\n","import operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: 0,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (Number.isNaN(Number(obj.total))) {\n    return {\n      total: 0,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return {};\n      }\n      return { next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: '0.' };\n    }\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n      return { total: `${obj.total} .` };\n    }\n    return { total: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    if ((obj.total || obj.total === '0') && !obj.next) {\n      return { ...obj, operation: buttonName };\n    }\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Calculator from './components/Calculator';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"td\":\"TableData_td__1XE3d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tr\":\"TableRow_tr__3top_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__3M_gK\"};"],"sourceRoot":""}